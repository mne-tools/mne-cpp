name: Linux

on:
  push:
    branches:
    - master
    - github_actions

jobs:
  Release:
    runs-on: ubuntu-16.04
    
    steps:
    - name: Clone repository
      uses: actions/checkout@v1
    - name: Install hub
      uses: geertvdc/setup-hub@master
      env:
        GITHUB_USER: ${{ secrets.GITHUB_USER }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Install Qt
      run: |
        sudo apt-get install build-essential libgl1-mesa-dev -y
        pip3 install setuptools wheel
        pip3 install aqtinstall --pre
        python3 -m aqt install --outputdir $HOME/Qt 5.10.1 linux desktop --module qtcharts
        echo "::add-path::$HOME/Qt/5.10.1/gcc_64/bin"
    - name: Configure and compile MNE-CPP
      run: |        
        qmake -r MNECPP_CONFIG+=noTests
        make -j2 
    - name: Package binaries
      run: |
        # Downloading linuxdeployqt from continious release
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        sudo chmod a+x linuxdeployqt-continuous-x86_64.AppImage
        #creating a directory for linuxdeployqt to create results 
        sudo mkdir -p -m777 mne-cpp
        # Install non-QT packages, just paranoia.
        #sudo apt-get install -qq libicu52 libxcb-xinerama0
        #setting linuxdeployqt to variable
        linuxdeployqt=linuxdeployqt-continuous-x86_64.AppImage
        #archive file name created
        archive_name="mne-cpp-linux-x86_64-dev-build.tar.gz"
        #copying built data to folder for easy packaging 	
        cp -r ./bin ./lib mne-cpp/
        #dropping into folder to easily package all results from linuxdeployqt
        cd mne-cpp
        #linuxdeployqt uses mne_scan binary to resolve dependencies in current directory. 
        pwd
        ls -l
        cd bin 
        pwd
        ls -l
        cd ..
        pwd
        ../$linuxdeployqt bin/mne_scan
        #creating archive of everything in current directory
        tar cfvz ../$archive_name ./*
    - uses: fusion-engineering/setup-git-credentials@v2
      with:
        credentials: ${{secrets.GIT_CREDENTIALS}}
    - name: Update dev_build_linux tag and release
      run: |
        git config --global user.email lorenzesch@hotmail.com
        git config --global user.name LorenzE
        # Delete current tag locally if existent
        if [ $(git tag -l "dev_build_linux") ]; then
          git tag -d dev_build_linux
        fi
        # Delete current release remotley. This gets rid of the left over draft release. This must be done before deleting the remote tag
        hub release delete dev_build_linux
        # Delete current tag remotley
        git push origin :refs/tags/dev_build_linux
        # Create new tag once again
        git tag -a dev_build_linux -m "Dev Build Linux"
        # Send the new tag
        git push --force origin refs/tags/dev_build_linux:refs/tags/dev_build_linux
    - name: Deploy binaries with dev_build_linux release at Github
      uses: svenstaro/upload-release-action@v1-release
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: mne-cpp-linux-x86_64-dev-build.tar.gz
        asset_name: mne-cpp-linux-x86_64-dev-build.tar.gz
        tag: dev_build_linux